package ch.poiuqwer.saitek.fip4j.impl;

import com.sun.jna.Pointer;
import com.sun.jna.WString;
import com.sun.jna.win32.StdCallLibrary;

/**
 * Copyright 2015 Hermann Lehner
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JNA Wrapper for library <b>DirectOutput</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("unused")
public interface DirectOutput extends StdCallLibrary {

    String JNA_LIBRARY_NAME = "DirectOutput";
    /** X52Pro ScrollClick */
    int SoftButton_Select = 0x00000001;
    /** X52Pro ScrollUp, FIP RightScrollClockwize */
    int SoftButton_Up = 0x00000002;
    /** X52Pro ScrollDown, FIP RightScrollAnticlockwize */
    int SoftButton_Down = 0x00000004;
    /** FIP LeftScrollAnticlockwize */
    int SoftButton_Left = 0x00000008;
    /** FIP LeftScrollClockwize */
    int SoftButton_Right = 0x00000010;
    /** FIP LeftButton1 */
    int SoftButton_1 = 0x00000020;
    /** FIP LeftButton2 */
    int SoftButton_2 = 0x00000040;
    /** FIP LeftButton3 */
    int SoftButton_3 = 0x00000080;
    /** FIP LeftButton4 */
    int SoftButton_4 = 0x00000100;
    /** FIP LeftButton5 */
    int SoftButton_5 = 0x00000200;
    /** FIP LeftButton6 */
    int SoftButton_6 = 0x00000400;
    /** Set this page as the Active Page */
    int FLAG_SET_AS_ACTIVE = 0x00000001;

    interface Pfn_DirectOutput_EnumerateCallback extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, Pointer pCtxt);
    }

    interface Pfn_DirectOutput_DeviceChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, byte bAdded, Pointer pCtxt);
    }

    interface Pfn_DirectOutput_PageChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, int dwPage, byte bSetActive, Pointer pCtxt);
    }

    interface Pfn_DirectOutput_SoftButtonChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, int dwButtons, Pointer pCtxt);
    }

    /**
     * S_OK : succeeded<br>
     * Original signature : <code>HRESULT DirectOutput_Initialize(const wchar_t*)</code><br>
     * <i>native declaration : line 90</i>
     */
    int DirectOutput_Initialize(WString wszPluginName);

    /**
     * S_OK : succeeded<br>
     * Original signature : <code>HRESULT DirectOutput_Deinitialize()</code><br>
     * <i>native declaration : line 97</i>
     */
    int DirectOutput_Deinitialize();

    /**
     * S_OK : succeeded<br>
     * Original signature : <code>HRESULT DirectOutput_RegisterDeviceCallback(Pfn_DirectOutput_DeviceChange, void*)</code><br>
     * <i>native declaration : line 106</i>
     */
    int DirectOutput_RegisterDeviceCallback(DirectOutput.Pfn_DirectOutput_DeviceChange pfnCb, Pointer pCtxt);

    /**
     * HRESULT __stdcall DirectOutput_Enumerate();<br>
     * Original signature : <code>HRESULT DirectOutput_Enumerate(Pfn_DirectOutput_EnumerateCallback, void*)</code><br>
     * <i>native declaration : line 114</i>
     */
    int DirectOutput_Enumerate(DirectOutput.Pfn_DirectOutput_EnumerateCallback pfnCb, Pointer pCtxt);

    /**
     * E_HANDLE : hDevice is not a valid device handle<br>
     * Original signature : <code>HRESULT DirectOutput_RegisterPageCallback(void*, Pfn_DirectOutput_PageChange, void*)</code><br>
     * <i>native declaration : line 128</i>
     */
    int DirectOutput_RegisterPageCallback(Pointer hDevice, DirectOutput.Pfn_DirectOutput_PageChange pfnCb, Pointer pCtxt);

    /**
     * E_HANDLE : hDevice is not a valid device handle<br>
     * Original signature : <code>HRESULT DirectOutput_RegisterSoftButtonCallback(void*, Pfn_DirectOutput_SoftButtonChange, void*)</code><br>
     * <i>native declaration : line 139</i>
     */
    int DirectOutput_RegisterSoftButtonCallback(Pointer hDevice, DirectOutput.Pfn_DirectOutput_SoftButtonChange pfnCb, Pointer pCtxt);

    /**
     * E_INVALIDARG : pGuid is NULL<br>
     * Original signature : <code>HRESULT DirectOutput_GetDeviceType(void*, LPGUID)</code><br>
     * <i>native declaration : line 153</i>
     */
    int DirectOutput_GetDeviceType(Pointer hDevice, Pointer pGuid);

    /**
     * E_NOTIMPL : hDevice does not support DirectInput.<br>
     * Original signature : <code>HRESULT DirectOutput_GetDeviceInstance(void*, LPGUID)</code><br>
     * <i>native declaration : line 165</i>
     */
    int DirectOutput_GetDeviceInstance(Pointer hDevice, Pointer pGuid);

    /**
     * E_NOTIMPL : hDevice does not support SST profiles<br>
     * Original signature : <code>HRESULT DirectOutput_SetProfile(void*, DWORD, const wchar_t*)</code><br>
     * <i>native declaration : line 180</i>
     */
    int DirectOutput_SetProfile(Pointer hDevice, int cchProfile, WString wszProfile);

    /**
     * E_HANDLE : hDevice is not a valid device handle<br>
     * Original signature : <code>HRESULT DirectOutput_AddPage(void*, DWORD, const wchar_t*, DWORD)</code><br>
     * <i>native declaration : line 195</i>
     */
    int DirectOutput_AddPage(Pointer hDevice, int dwPage, WString wszDebugName, int dwFlags);

    /**
     * E_INVALIDARG : dwPage is not a valid page id<br>
     * Original signature : <code>HRESULT DirectOutput_RemovePage(void*, DWORD)</code><br>
     * <i>native declaration : line 206</i>
     */
    int DirectOutput_RemovePage(Pointer hDevice, int dwPage);

    /**
     * E_PAGENOTACTIVE : dwPage is not the active page<br>
     * Original signature : <code>HRESULT DirectOutput_SetLed(void*, DWORD, DWORD, DWORD)</code><br>
     * <i>native declaration : line 224</i>
     */
    int DirectOutput_SetLed(Pointer hDevice, int dwPage, int dwIndex, int dwValue);

    /**
     * E_PAGENOTACTIVE : dwPage is not the active page<br>
     * Original signature : <code>HRESULT DirectOutput_SetString(void*, DWORD, DWORD, DWORD, const wchar_t*)</code><br>
     * <i>native declaration : line 240</i>
     */
    int DirectOutput_SetString(Pointer hDevice, int dwPage, int dwIndex, int cchValue, WString wszValue);

    /**
     * E_BUFFERTOOSMALL : cbValue is not of the correct size<br>
     * Original signature : <code>HRESULT DirectOutput_SetImage(void*, DWORD, DWORD, DWORD, const void*)</code><br>
     * <i>native declaration : line 257</i>
     */
    int DirectOutput_SetImage(Pointer hDevice, int dwPage, int dwIndex, int cbValue, Pointer pvValue);

    /**
     * E_PAGENOTACTIVE : dwPage is not the active page<br>
     * Original signature : <code>HRESULT DirectOutput_SetImageFromFile(void*, DWORD, DWORD, DWORD, const wchar_t*)</code><br>
     * <i>native declaration : line 273</i>
     */
    int DirectOutput_SetImageFromFile(Pointer hDevice, int dwPage, int dwIndex, int cchFilename, WString wszFilename);

    /**
     * E_FAIL : fatal error<br>
     * Original signature : <code>HRESULT DirectOutput_StartServer(void*, DWORD, const wchar_t*, LPDWORD, PSRequestStatus)</code><br>
     * <i>native declaration : line 291</i>
     */
    int DirectOutput_StartServer(Pointer hDevice, int cchFilename, WString wszFilename, Pointer pdwServerId, RequestStatus psStatus);

    /**
     * E_FAIL : fatal error<br>
     * Original signature : <code>HRESULT DirectOutput_CloseServer(void*, DWORD, PSRequestStatus)</code><br>
     * <i>native declaration : line 304</i>
     */
    int DirectOutput_CloseServer(Pointer hDevice, int dwServerId, RequestStatus psStatus);

    /**
     * E_PAGENOTACTIVE : dwPage is not the active page and the server tried to access the display<br>
     * Original signature : <code>HRESULT DirectOutput_SendServerMsg(void*, DWORD, DWORD, DWORD, DWORD, const void*, DWORD, void*, PSRequestStatus)</code><br>
     * <i>native declaration : line 324</i>
     */
    int DirectOutput_SendServerMsg(Pointer hDevice, int dwServerId, int dwRequest, int dwPage, int cbIn, Pointer pvIn, int cbOut, Pointer pvOut, RequestStatus psStatus);

    /**
     * E_PAGENOTACTIVE : dwPage is not the active page and the server tried to access the display<br>
     * Original signature : <code>HRESULT DirectOutput_SendServerFile(void*, DWORD, DWORD, DWORD, DWORD, const void*, DWORD, const wchar_t*, DWORD, void*, PSRequestStatus)</code><br>
     * <i>native declaration : line 346</i>
     */
    int DirectOutput_SendServerFile(Pointer hDevice, int dwServerId, int dwRequest, int dwPage, int cbInHdr, Pointer pvInHdr, int cchFile, WString wszFile, int cbOut, Pointer pvOut, RequestStatus psStatus);

    /**
     * E_FAIL : fatal error<br>
     * Original signature : <code>HRESULT DirectOutput_SaveFile(void*, DWORD, DWORD, DWORD, const wchar_t*, PSRequestStatus)</code><br>
     * <i>native declaration : line 365</i>
     */
    int DirectOutput_SaveFile(Pointer hDevice, int dwPage, int dwFile, int cchFilename, WString wszFilename, RequestStatus psStatus);

    /**
     * E_FAIL : fatal error<br>
     * Original signature : <code>HRESULT DirectOutput_DisplayFile(void*, DWORD, DWORD, DWORD, PSRequestStatus)</code><br>
     * <i>native declaration : line 381</i>
     */
    int DirectOutput_DisplayFile(Pointer hDevice, int dwPage, int dwIndex, int dwFile, RequestStatus psStatus);

    /**
     * E_FAIL : fatal error<br>
     * Original signature : <code>HRESULT DirectOutput_DeleteFile(void*, DWORD, DWORD, PSRequestStatus)</code><br>
     * <i>native declaration : line 395</i>
     */
    int DirectOutput_DeleteFile(Pointer hDevice, int dwPage, int dwFile, RequestStatus psStatus);

}
