package ch.poiuqwer.saitek.fip4j.impl;

import com.sun.jna.Pointer;
import com.sun.jna.WString;
import com.sun.jna.win32.StdCallLibrary;

/**
 * Copyright 2015 Hermann Lehner
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <p>
 * JNA Wrapper for library <b>DirectOutput</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("unused")
public interface Library extends StdCallLibrary {

    String JNA_LIBRARY_NAME = "DirectOutput";

    /**
     * Left and right scroll buttons
     */
    int RIGHT_SCROLL_UP = 0x00000002;
    int RIGHT_SCROLL_DOWN = 0x00000004;
    int LEFT_SCROLL_DOWN = 0x00000008;
    int LEFT_SCROLL_UP = 0x00000010;

    /**
     * Six buttons on the left
     */
    int BUTTON_1 = 0x00000020;
    int BUTTON_2 = 0x00000040;
    int BUTTON_3 = 0x00000080;
    int BUTTON_4 = 0x00000100;
    int BUTTON_5 = 0x00000200;
    int BUTTON_6 = 0x00000400;

    /**
     * Flag to mark added page as active.
     */
    int FLAG_SET_AS_ACTIVE = 0x00000001;

    /**
     * Callback for DirectOutput_Enumerate
     */
    interface Pfn_DirectOutput_EnumerateCallback extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, Pointer pCtxt);
    }

    /**
     * Callback for DirectOutput_RegisterDeviceCallback
     */
    interface Pfn_DirectOutput_DeviceChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, byte bAdded, Pointer pCtxt);
    }

    /**
     * Callback for DirectOutput_RegisterPageCallback
     */
    interface Pfn_DirectOutput_PageChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, int dwPage, byte bSetActive, Pointer pCtxt);
    }

    /**
     * Callback for  DirectOutput_RegisterSoftButtonCallback
     */
    interface Pfn_DirectOutput_SoftButtonChange extends StdCallLibrary.StdCallCallback {
        void apply(Pointer hDevice, int dwButtons, Pointer pCtxt);
    }

    /**
     * Initialize the library
     * @param wszPluginName null-terminated wchar_t name of the plugin. Used for debugging purposes. Can be NULL
     * @return S_OK : succeeded
     */
    int DirectOutput_Initialize(WString wszPluginName);

    /**
     * Cleanup the library
     * @return S_OK : succeeded
     */
    int DirectOutput_Deinitialize();

    /**
     * Register a callback. Callback will be called whenever a device is added or removed, or when DirectOutput_Enumerate is called
     * @param pfnCb pointer to the callback function to be called when a device is added or removed
     * @param pCtxt caller supplied context pointer, passed to the callback function
     * @return S_OK : succeeded
     */
    int DirectOutput_RegisterDeviceCallback(Library.Pfn_DirectOutput_DeviceChange pfnCb, Pointer pCtxt);

    /**
     * Enumerate all devices currently attached. Calls DeviceChange callback.
     * @param pfnCb pointer to the callback function which is called once for each device
     * @param pCtxt caller supplied context pointer, passed to the callback function
     * @return S_OK : succeeded
     */
    int DirectOutput_Enumerate(Library.Pfn_DirectOutput_EnumerateCallback pfnCb, Pointer pCtxt);

    /**
     * Register a callback. Called when the page changes. Callee will only receive notifications about pages they added
     * @param hDevice opaque device handle
     * @param pfnCb caller supplied callback function, called when the active page is changed to/from one of the caller's pages
     * @param pCtxt caller supplied context pointer, passed to the callback function
     * @return S_OK: succeeded<br>
     *     E_HANDLE: hDevice is not a valid device handle
     */
    int DirectOutput_RegisterPageCallback(Pointer hDevice, Library.Pfn_DirectOutput_PageChange pfnCb, Pointer pCtxt);

    /**
     * Register a callback. Called when the soft buttons are changed and the callee's page is active
     * @param hDevice opaque device handle
     * @param pfnCb caller supplied callback function, called when the soft buttons are changed and one of the caller's pages is active
     * @param pCtxt caller supplied context pointer, passed to the callback function
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle
     */
    int DirectOutput_RegisterSoftButtonCallback(Pointer hDevice, Library.Pfn_DirectOutput_SoftButtonChange pfnCb, Pointer pCtxt);

    /**
     * Get the device type GUID. See DeviceType_* constants
     * @param hDevice opaque device handle
     * @param pGuid pointer to GUID to receive device type identifier. See DeviceType_* constants
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_INVALIDARG : pGuid is NULL
     */
    int DirectOutput_GetDeviceType(Pointer hDevice, Pointer pGuid);

    /**
     * Get the device instance GUID used by IDirectInput::CreateDevice
     * @param hDevice opaque device handle
     * @param pGuid pointer to GUID to receive device's DirectInput Instance Guid.
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_INVALIDARG : pGuid is NULL<br>
     *     E_NOTIMPL : hDevice does not support DirectInput.
     */
    int DirectOutput_GetDeviceInstance(Pointer hDevice, Pointer pGuid);

    /**
     *
     * @param hDevice opaque device handle
     * @param pszSerialNumber String buffer to hold the serial number of the device. The String can be empty if no serial number associated with the device.
     * @param dwSize Specify the number of characters of the string buffer. The VALUE of this parameter shouldn't be greater than 16. Otherwise, the string buffer is truncated into 16 characters.
     * @return S_OK : succeeded
     */
    int DirectOutput_GetSerialNumber(Pointer hDevice, Pointer pszSerialNumber, int dwSize);

    /**
     * Adds a page to the device
     * @param hDevice opaque device handle
     * @param dwPage caller assigned page id to add
     * @param wszDebugName Only used for debugging, can be null
     * @param dwFlags flags ( 0 | PAGE_ACTIVE )
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle
     */
    int DirectOutput_AddPage(Pointer hDevice, int dwPage, WString wszDebugName, int dwFlags);

    /**
     * Removes a page from the device
     * @param hDevice opaque device handle
     * @param dwPage caller assigned page id to remove
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_INVALIDARG : dwPage is not a valid page id
     */
    int DirectOutput_RemovePage(Pointer hDevice, int dwPage);

    /**
     * Set the state of a LED on the device
     * @param hDevice opaque device handle
     * @param dwPage page to display the LED on
     * @param dwIndex index of the LED (1 to 6: buttons, 7: page up, 8: page down)
     * @param dwValue VALUE of the LED (0 is off, 1 is on)
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_NOTIMPL : hDevice does not have any leds<br>
     *     E_INVALIDARG : dwPage or dwIndex is not a valid id<br>
     *     E_PAGENOTACTIVE : dwPage is not the active page
     */
    int DirectOutput_SetLed(Pointer hDevice, int dwPage, int dwIndex, int dwValue);

    /**
     * Set the image on the device.
     * @param hDevice opaque device handle
     * @param dwPage page to display the image on
     * @param dwIndex index of the image
     * @param cbValue the count of bytes of pvValue
     * @param pvValue the raw bytes from a BMP (only the bytes that contain pixel data - must be correct format and size)
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_NOTIMPL : hDevice does not have any images<br>
     *     E_INVALIDARG : dwPage or dwIndex is not a valid id<br>
     *     E_PAGENOTACTIVE : dwPage is not the active page<br>
     *     E_BUFFERTOOSMALL : cbValue is not of the correct size
     */
    int DirectOutput_SetImage(Pointer hDevice, int dwPage, int dwIndex, int cbValue, Pointer pvValue);

    /**
     * Set the image on the device from a file.
     * @param hDevice opaque device handle
     * @param dwPage page to display the image on
     * @param dwIndex index of the image
     * @param cchFilename the count of characters in wszFilename
     * @param wszFilename the full path to the image file to display. Must be a BMP or JPG file
     * @return S_OK : succeeded<br>
     *     E_HANDLE : hDevice is not a valid device handle<br>
     *     E_NOTIMPL : hDevice does not have any images<br>
     *     E_INVALIDARG : dwPage or dwIndex is not a valid id<br>
     *     E_PAGENOTACTIVE : dwPage is not the active page
     */
    int DirectOutput_SetImageFromFile(Pointer hDevice, int dwPage, int dwIndex, int cchFilename, WString wszFilename);

}
